#include <Arduino.h>

#define dataPin 12
#define clockPin 11
#define loadPin 10
#define nDisp 7


//(0)00000000       (1)00000000         (2)00000000         (3)00000000         ...
//(nDisp)00000000   (nDisp+1)00000000   (nDisp+2)00000000   (nDisp+3)00000000   ...
//(2nDisp)00000000  (2nDisp+1)00000000  (2nDisp+2)00000000  (2nDisp+3)00000000  ...
//     ...                  ...               ...                 ...
byte framebuffer[nDisp+1][8];

const byte font[256][8] PROGMEM = {
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //
{0x7e, 0x81, 0xa5, 0x81, 0xbd, 0x99, 0x81, 0x7e}, //
{0x7e, 0xff, 0xdb, 0xff, 0xc3, 0xe7, 0xff, 0x7e}, //
{0x6c, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00}, //
{0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00}, //
{0x38, 0x7c, 0x38, 0xfe, 0xfe, 0x7c, 0x38, 0x7c}, //
{0x10, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x7c}, //
{0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00}, //
{0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff}, //
{0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00}, //
{0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff}, //
{0x0f, 0x07, 0x0f, 0x7d, 0xcc, 0xcc, 0xcc, 0x78}, //
{0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18}, //
{0x3f, 0x33, 0x3f, 0x30, 0x30, 0x70, 0xf0, 0xe0}, //
{0x7f, 0x63, 0x7f, 0x63, 0x63, 0x67, 0xe6, 0xc0}, //
{0x99, 0x5a, 0x3c, 0xe7, 0xe7, 0x3c, 0x5a, 0x99}, //
{0x80, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0x80, 0x00}, //
{0x02, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x02, 0x00}, //
{0x18, 0x3c, 0x7e, 0x18, 0x18, 0x7e, 0x3c, 0x18}, //
{0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x00}, //
{0x7f, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x00}, //
{0x3e, 0x63, 0x38, 0x6c, 0x6c, 0x38, 0xcc, 0x78}, //
{0x00, 0x00, 0x00, 0x00, 0x7e, 0x7e, 0x7e, 0x00}, //
{0x18, 0x3c, 0x7e, 0x18, 0x7e, 0x3c, 0x18, 0xff}, //
{0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x00}, //
{0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00}, //
{0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00}, //
{0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00}, //
{0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00}, //
{0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00}, //
{0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x00, 0x00}, //
{0x00, 0xff, 0xff, 0x7e, 0x3c, 0x18, 0x00, 0x00}, //
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //
{0x30, 0x78, 0x78, 0x30, 0x30, 0x00, 0x30, 0x00}, //!
{0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00}, //"
{0x6c, 0x6c, 0xfe, 0x6c, 0xfe, 0x6c, 0x6c, 0x00}, //#
{0x30, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x30, 0x00}, //$
{0x00, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xc6, 0x00}, //%
{0x38, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0x76, 0x00}, //&
{0x60, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00}, //'
{0x18, 0x30, 0x60, 0x60, 0x60, 0x30, 0x18, 0x00}, //(
{0x60, 0x30, 0x18, 0x18, 0x18, 0x30, 0x60, 0x00}, //)
{0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00}, //*
{0x00, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0x00}, //+
{0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x60}, //,
{0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00}, //-
{0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00}, //.
{0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00}, ///
{0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0x7c, 0x00}, //0
{0x30, 0x70, 0x30, 0x30, 0x30, 0x30, 0xfc, 0x00}, //1
{0x78, 0xcc, 0x0c, 0x38, 0x60, 0xcc, 0xfc, 0x00}, //2
{0x78, 0xcc, 0x0c, 0x38, 0x0c, 0xcc, 0x78, 0x00}, //3
{0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x1e, 0x00}, //4
{0xfc, 0xc0, 0xf8, 0x0c, 0x0c, 0xcc, 0x78, 0x00}, //5
{0x38, 0x60, 0xc0, 0xf8, 0xcc, 0xcc, 0x78, 0x00}, //6
{0xfc, 0xcc, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x00}, //7
{0x78, 0xcc, 0xcc, 0x78, 0xcc, 0xcc, 0x78, 0x00}, //8
{0x78, 0xcc, 0xcc, 0x7c, 0x0c, 0x18, 0x70, 0x00}, //9
{0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x00}, //:
{0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x60}, //;
{0x18, 0x30, 0x60, 0xc0, 0x60, 0x30, 0x18, 0x00}, //<
{0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00}, //=
{0x60, 0x30, 0x18, 0x0c, 0x18, 0x30, 0x60, 0x00}, //>
{0x78, 0xcc, 0x0c, 0x18, 0x30, 0x00, 0x30, 0x00}, //?
{0x7c, 0xc6, 0xde, 0xde, 0xde, 0xc0, 0x78, 0x00}, //@
{0x30, 0x78, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0x00}, //A
{0xfc, 0x66, 0x66, 0x7c, 0x66, 0x66, 0xfc, 0x00}, //B
{0x3c, 0x66, 0xc0, 0xc0, 0xc0, 0x66, 0x3c, 0x00}, //C
{0xf8, 0x6c, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00}, //D
{0xfe, 0x62, 0x68, 0x78, 0x68, 0x62, 0xfe, 0x00}, //E
{0xfe, 0x62, 0x68, 0x78, 0x68, 0x60, 0xf0, 0x00}, //F
{0x3c, 0x66, 0xc0, 0xc0, 0xce, 0x66, 0x3e, 0x00}, //G
{0xcc, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0xcc, 0x00}, //H
{0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00}, //I
{0x1e, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00}, //J
{0xe6, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00}, //K
{0xf0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00}, //L
{0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0x00}, //M
{0xc6, 0xe6, 0xf6, 0xde, 0xce, 0xc6, 0xc6, 0x00}, //N
{0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00}, //O
{0xfc, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00}, //P
{0x78, 0xcc, 0xcc, 0xcc, 0xdc, 0x78, 0x1c, 0x00}, //Q
{0xfc, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0xe6, 0x00}, //R
{0x78, 0xcc, 0xe0, 0x70, 0x1c, 0xcc, 0x78, 0x00}, //S
{0xfc, 0xb4, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00}, //T
{0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0x00}, //U
{0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00}, //V
{0xc6, 0xc6, 0xc6, 0xd6, 0xfe, 0xee, 0xc6, 0x00}, //W
{0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00}, //X
{0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x30, 0x78, 0x00}, //Y
{0xfe, 0xc6, 0x8c, 0x18, 0x32, 0x66, 0xfe, 0x00}, //Z
{0x78, 0x60, 0x60, 0x60, 0x60, 0x60, 0x78, 0x00}, //[
{0xc0, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x02, 0x00}, //
{0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x00}, //]
{0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00}, //^
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff}, //_
{0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00}, //`
{0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x76, 0x00}, //a
{0xe0, 0x60, 0x60, 0x7c, 0x66, 0x66, 0xdc, 0x00}, //b
{0x00, 0x00, 0x78, 0xcc, 0xc0, 0xcc, 0x78, 0x00}, //c
{0x1c, 0x0c, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00}, //d
{0x00, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00}, //e
{0x38, 0x6c, 0x60, 0xf0, 0x60, 0x60, 0xf0, 0x00}, //f
{0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8}, //g
{0xe0, 0x60, 0x6c, 0x76, 0x66, 0x66, 0xe6, 0x00}, //h
{0x30, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00}, //i
{0x0c, 0x00, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78}, //j
{0xe0, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0xe6, 0x00}, //k
{0x70, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00}, //l
{0x00, 0x00, 0xcc, 0xfe, 0xfe, 0xd6, 0xc6, 0x00}, //m
{0x00, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0xcc, 0x00}, //n
{0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x00}, //o
{0x00, 0x00, 0xdc, 0x66, 0x66, 0x7c, 0x60, 0xf0}, //p
{0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0x1e}, //q
{0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0xf0, 0x00}, //r
{0x00, 0x00, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x00}, //s
{0x10, 0x30, 0x7c, 0x30, 0x30, 0x34, 0x18, 0x00}, //t
{0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00}, //u
{0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00}, //v
{0x00, 0x00, 0xc6, 0xd6, 0xfe, 0xfe, 0x6c, 0x00}, //w
{0x00, 0x00, 0xc6, 0x6c, 0x38, 0x6c, 0xc6, 0x00}, //x
{0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8}, //y
{0x00, 0x00, 0xfc, 0x98, 0x30, 0x64, 0xfc, 0x00}, //z
{0x1c, 0x30, 0x30, 0xe0, 0x30, 0x30, 0x1c, 0x00}, //{
{0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00}, //|
{0xe0, 0x30, 0x30, 0x1c, 0x30, 0x30, 0xe0, 0x00}, //}
{0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //~
{0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00}, //
{0x78, 0xcc, 0xc0, 0xcc, 0x78, 0x18, 0x0c, 0x78}, //ï¿½
{0x00, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00}, //ï¿½
{0x1c, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00}, //ï¿½
{0x7e, 0xc3, 0x3c, 0x06, 0x3e, 0x66, 0x3f, 0x00}, //ï¿½
{0xcc, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00}, //ï¿½
{0xe0, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00}, //ï¿½
{0x30, 0x30, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00}, //ï¿½
{0x00, 0x00, 0x78, 0xc0, 0xc0, 0x78, 0x0c, 0x38}, //ï¿½
{0x7e, 0xc3, 0x3c, 0x66, 0x7e, 0x60, 0x3c, 0x00}, //ï¿½
{0xcc, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00}, //ï¿½
{0xe0, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00}, //ï¿½
{0xcc, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00}, //ï¿½
{0x7c, 0xc6, 0x38, 0x18, 0x18, 0x18, 0x3c, 0x00}, //ï¿½
{0xe0, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00}, //ï¿½
{0xc6, 0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0xc6, 0x00}, //ï¿½
{0x30, 0x30, 0x00, 0x78, 0xcc, 0xfc, 0xcc, 0x00}, //ï¿½
{0x1c, 0x00, 0xfc, 0x60, 0x78, 0x60, 0xfc, 0x00}, //ï¿½
{0x00, 0x00, 0x7f, 0x0c, 0x7f, 0xcc, 0x7f, 0x00}, //ï¿½
{0x3e, 0x6c, 0xcc, 0xfe, 0xcc, 0xcc, 0xce, 0x00}, //ï¿½
{0x78, 0xcc, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00}, //ï¿½
{0x00, 0xcc, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00}, //ï¿½
{0x00, 0xe0, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00}, //ï¿½
{0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00}, //ï¿½
{0x00, 0xe0, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00}, //ï¿½
{0x00, 0xcc, 0x00, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8}, //ï¿½
{0xc3, 0x18, 0x3c, 0x66, 0x66, 0x3c, 0x18, 0x00}, //ï¿½
{0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x00}, //ï¿½
{0x18, 0x18, 0x7e, 0xc0, 0xc0, 0x7e, 0x18, 0x18}, //ï¿½
{0x38, 0x6c, 0x64, 0xf0, 0x60, 0xe6, 0xfc, 0x00}, //ï¿½
{0xcc, 0xcc, 0x78, 0xfc, 0x30, 0xfc, 0x30, 0x30}, //ï¿½
{0xf8, 0xcc, 0xcc, 0xfa, 0xc6, 0xcf, 0xc6, 0xc7}, //ï¿½
{0x0e, 0x1b, 0x18, 0x3c, 0x18, 0x18, 0xd8, 0x70}, //ï¿½
{0x1c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00}, //ï¿½
{0x38, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00}, //ï¿½
{0x00, 0x1c, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00}, //ï¿½
{0x00, 0x1c, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00}, //ï¿½
{0x00, 0xf8, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0x00}, //ï¿½
{0xfc, 0x00, 0xcc, 0xec, 0xfc, 0xdc, 0xcc, 0x00}, //ï¿½
{0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00}, //ï¿½
{0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00}, //ï¿½
{0x30, 0x00, 0x30, 0x60, 0xc0, 0xcc, 0x78, 0x00}, //ï¿½
{0x00, 0x00, 0x00, 0xfc, 0xc0, 0xc0, 0x00, 0x00}, //ï¿½
{0x00, 0x00, 0x00, 0xfc, 0x0c, 0x0c, 0x00, 0x00}, //ï¿½
{0xc3, 0xc6, 0xcc, 0xde, 0x33, 0x66, 0xcc, 0x0f}, //ï¿½
{0xc3, 0xc6, 0xcc, 0xdb, 0x37, 0x6f, 0xcf, 0x03}, //ï¿½
{0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00}, //ï¿½
{0x00, 0x33, 0x66, 0xcc, 0x66, 0x33, 0x00, 0x00}, //ï¿½
{0x00, 0xcc, 0x66, 0x33, 0x66, 0xcc, 0x00, 0x00}, //ï¿½
{0x22, 0x88, 0x22, 0x88, 0x22, 0x88, 0x22, 0x88}, //ï¿½
{0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa}, //ï¿½
{0xdb, 0x77, 0xdb, 0xee, 0xdb, 0x77, 0xdb, 0xee}, //ï¿½
{0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18}, //ï¿½
{0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18}, //ï¿½
{0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18}, //ï¿½
{0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36}, //ï¿½
{0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36}, //ï¿½
{0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18}, //ï¿½
{0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36}, //ï¿½
{0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36}, //ï¿½
{0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36}, //ï¿½
{0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00}, //ï¿½
{0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00}, //ï¿½
{0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00}, //ï¿½
{0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18}, //ï¿½
{0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00}, //ï¿½
{0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00}, //ï¿½
{0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18}, //ï¿½
{0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18}, //ï¿½
{0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00}, //ï¿½
{0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18}, //ï¿½
{0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18}, //ï¿½
{0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36}, //ï¿½
{0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00}, //ï¿½
{0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36}, //ï¿½
{0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00}, //ï¿½
{0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36}, //ï¿½
{0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36}, //ï¿½
{0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00}, //ï¿½
{0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36}, //ï¿½
{0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00}, //ï¿½
{0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00}, //ï¿½
{0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18}, //ï¿½
{0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36}, //ï¿½
{0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00}, //ï¿½
{0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00}, //ï¿½
{0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18}, //ï¿½
{0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36}, //ï¿½
{0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36}, //ï¿½
{0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18}, //ï¿½
{0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00}, //ï¿½
{0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18}, //ï¿½
{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}, //ï¿½
{0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff}, //ï¿½
{0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0}, //ï¿½
{0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f}, //ï¿½
{0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00}, //ï¿½
{0x00, 0x00, 0x76, 0xdc, 0xc8, 0xdc, 0x76, 0x00}, //ï¿½
{0x00, 0x78, 0xcc, 0xf8, 0xcc, 0xf8, 0xc0, 0xc0}, //ï¿½
{0x00, 0xfc, 0xcc, 0xc0, 0xc0, 0xc0, 0xc0, 0x00}, //ï¿½
{0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00}, //ï¿½
{0xfc, 0xcc, 0x60, 0x30, 0x60, 0xcc, 0xfc, 0x00}, //ï¿½
{0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0x70, 0x00}, //ï¿½
{0x00, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0xc0}, //ï¿½
{0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x00}, //ï¿½
{0xfc, 0x30, 0x78, 0xcc, 0xcc, 0x78, 0x30, 0xfc}, //ï¿½
{0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0x6c, 0x38, 0x00}, //ï¿½
{0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x6c, 0xee, 0x00}, //ï¿½
{0x1c, 0x30, 0x18, 0x7c, 0xcc, 0xcc, 0x78, 0x00}, //ï¿½
{0x00, 0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00}, //ï¿½
{0x06, 0x0c, 0x7e, 0xdb, 0xdb, 0x7e, 0x60, 0xc0}, //ï¿½
{0x38, 0x60, 0xc0, 0xf8, 0xc0, 0x60, 0x38, 0x00}, //ï¿½
{0x78, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00}, //ï¿½
{0x00, 0xfc, 0x00, 0xfc, 0x00, 0xfc, 0x00, 0x00}, //ï¿½
{0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0xfc, 0x00}, //ï¿½
{0x60, 0x30, 0x18, 0x30, 0x60, 0x00, 0xfc, 0x00}, //ï¿½
{0x18, 0x30, 0x60, 0x30, 0x18, 0x00, 0xfc, 0x00}, //ï¿½
{0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18}, //ï¿½
{0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0x70}, //ï¿½
{0x30, 0x30, 0x00, 0xfc, 0x00, 0x30, 0x30, 0x00}, //ï¿½
{0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00}, //ï¿½
{0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00}, //ï¿½
{0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00}, //ï¿½
{0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00}, //ï¿½
{0x0f, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c, 0x1c}, //ï¿½
{0x78, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00}, //ï¿½
{0x70, 0x18, 0x30, 0x60, 0x78, 0x00, 0x00, 0x00}, //ï¿½
{0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00}, //ï¿½
{0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00} //ï¿½
};

void initDisp(byte numDisp, byte brightness){
  for(byte j=0; j<8; j++){
    digitalWrite(loadPin, LOW);
    for(int i=0; i<numDisp; i++){
      shiftOut(dataPin, clockPin, MSBFIRST, j+1);
      shiftOut(dataPin,clockPin, MSBFIRST, 0);
    }
    digitalWrite(loadPin, HIGH);
  }
  digitalWrite(loadPin, LOW);
  for(int i=0; i<numDisp; i++){
    shiftOut(dataPin, clockPin, MSBFIRST, 0xC);
    shiftOut(dataPin,clockPin, MSBFIRST, 1);
  }
  digitalWrite(loadPin, HIGH);
  digitalWrite(loadPin, LOW);
  for(int i=0; i<numDisp; i++){
    shiftOut(dataPin, clockPin, MSBFIRST, 0x9);
    shiftOut(dataPin,clockPin, MSBFIRST, 0);
  }
  digitalWrite(loadPin, HIGH);
  digitalWrite(loadPin, LOW);
  for(int i=0; i<numDisp; i++){
    shiftOut(dataPin, clockPin, MSBFIRST, 0xB);
    shiftOut(dataPin,clockPin, MSBFIRST, 7);
  }
  digitalWrite(loadPin, HIGH);
  digitalWrite(loadPin, LOW);
  for(int i=0; i<numDisp; i++){
    shiftOut(dataPin, clockPin, MSBFIRST, 0xA);
    shiftOut(dataPin,clockPin, MSBFIRST, brightness);
  }
  digitalWrite(loadPin, HIGH);

}

void setup() {
  pinMode(dataPin, OUTPUT);
  pinMode(clockPin, OUTPUT);
  pinMode(loadPin, OUTPUT);

  digitalWrite(loadPin, LOW);
  initDisp(nDisp, 7);
  delay(100);
  //PowerMode (0xXC)
  //1: Power On
  //0:Power Off

  //TestMode (0xXF)
  //1: TestMode On
  //0: TestMode Off

}

void sendStuffTo(byte add, byte data){
  digitalWrite(loadPin, LOW);
  shiftOut(dataPin, clockPin, MSBFIRST, add);
  shiftOut(dataPin,clockPin, MSBFIRST, data);
  digitalWrite(loadPin, HIGH);
}

void scrollLeft(){
  for(byte dispCounter = 0; dispCounter < nDisp + 1; dispCounter++)
    for (byte rowCounter = 0; rowCounter < 8; rowCounter++) {
      framebuffer[dispCounter][rowCounter] = (framebuffer[dispCounter][rowCounter] << 1) + (framebuffer[dispCounter+1][rowCounter] >> 7);
    }
}

void scrollRight(){

}

void drawChar(char sym, byte disp){
  memcpy_P(framebuffer[disp], font[sym], 8);
}

void writeToDisplay(){
  for(int columToFill = 0; columToFill < 8; columToFill++){
    digitalWrite(loadPin, LOW);
    for(int dispToFill = 0; dispToFill < nDisp+1; dispToFill++){
      shiftOut(dataPin, clockPin, MSBFIRST, columToFill+1); //Adress for first colum is 0xX1, not 0xX0
      shiftOut(dataPin, clockPin, LSBFIRST, framebuffer[nDisp-dispToFill][7-columToFill]); //Display is filled from bottom to top
    }
    digitalWrite(loadPin, HIGH);
  }
}

void drawText(char* text, int textLength){
  for(int j=0;j<textLength+nDisp;j++){
    if(j<textLength)
      drawChar(pgm_read_byte(text + j),nDisp);
    else
      drawChar(' ', nDisp);

    for (byte i = 0; i < nDisp+1; i++) {
      scrollLeft();
      writeToDisplay();
      //test
    }

  }
}


const char theText[] PROGMEM = {"Ein kleiner Testtext"};

void loop() {
drawText(theText, sizeof(theText));
delay(1000);
}
